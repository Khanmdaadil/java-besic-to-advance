{"ast":null,"code":"var _jsxFileName = \"/workspaces/java-besic-to-advance/Messanger-App/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport AuthService from '../services/AuthService';\nimport { generateKeyPair } from '../utils/encryption';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Check if there's a token in localStorage\n    const token = localStorage.getItem('token');\n    const userId = localStorage.getItem('userId');\n    const username = localStorage.getItem('username');\n    if (token && userId && username) {\n      setCurrentUser({\n        id: userId,\n        username,\n        token\n      });\n    }\n    setLoading(false);\n  }, []);\n\n  // Login function\n  const login = async (username, password) => {\n    try {\n      const response = await AuthService.login(username, password);\n      if (response.token) {\n        localStorage.setItem('token', response.token);\n        localStorage.setItem('userId', response.userId);\n        localStorage.setItem('username', response.username);\n        setCurrentUser({\n          id: response.userId,\n          username: response.username,\n          token: response.token\n        });\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    }\n  };\n\n  // Register function\n  const register = async (username, email, password) => {\n    try {\n      // Generate encryption keys for the user\n      const {\n        publicKey,\n        privateKey\n      } = generateKeyPair();\n\n      // Store private key securely\n      localStorage.setItem('privateKey', privateKey);\n      const response = await AuthService.register(username, email, password, publicKey);\n      return response.message === 'User registered successfully';\n    } catch (error) {\n      console.error('Registration error:', error);\n      return false;\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      if (currentUser) {\n        await AuthService.logout(currentUser.username);\n      }\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      // Clear local storage and state\n      localStorage.removeItem('token');\n      localStorage.removeItem('userId');\n      localStorage.removeItem('username');\n      setCurrentUser(null);\n      navigate('/login');\n    }\n  };\n  const value = {\n    currentUser,\n    login,\n    register,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"4XW06Xv3Wo+INaDFXZmN4cjHv/s=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useNavigate","AuthService","generateKeyPair","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","navigate","token","localStorage","getItem","userId","username","id","login","password","response","setItem","error","console","register","email","publicKey","privateKey","message","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/java-besic-to-advance/Messanger-App/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport AuthService from '../services/AuthService';\nimport { generateKeyPair } from '../utils/encryption';\n\n// Create context\nconst AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Check if there's a token in localStorage\n    const token = localStorage.getItem('token');\n    const userId = localStorage.getItem('userId');\n    const username = localStorage.getItem('username');\n    \n    if (token && userId && username) {\n      setCurrentUser({\n        id: userId,\n        username,\n        token\n      });\n    }\n    \n    setLoading(false);\n  }, []);\n\n  // Login function\n  const login = async (username, password) => {\n    try {\n      const response = await AuthService.login(username, password);\n      \n      if (response.token) {\n        localStorage.setItem('token', response.token);\n        localStorage.setItem('userId', response.userId);\n        localStorage.setItem('username', response.username);\n        \n        setCurrentUser({\n          id: response.userId,\n          username: response.username,\n          token: response.token\n        });\n        \n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    }\n  };\n\n  // Register function\n  const register = async (username, email, password) => {\n    try {\n      // Generate encryption keys for the user\n      const { publicKey, privateKey } = generateKeyPair();\n      \n      // Store private key securely\n      localStorage.setItem('privateKey', privateKey);\n      \n      const response = await AuthService.register(username, email, password, publicKey);\n      return response.message === 'User registered successfully';\n    } catch (error) {\n      console.error('Registration error:', error);\n      return false;\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      if (currentUser) {\n        await AuthService.logout(currentUser.username);\n      }\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      // Clear local storage and state\n      localStorage.removeItem('token');\n      localStorage.removeItem('userId');\n      localStorage.removeItem('username');\n      setCurrentUser(null);\n      navigate('/login');\n    }\n  };\n\n  const value = {\n    currentUser,\n    login,\n    register,\n    logout,\n    loading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}