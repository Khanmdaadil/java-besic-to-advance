{"ast":null,"code":"var _jsxFileName = \"/workspaces/java-besic-to-advance/Messanger-App/frontend/src/pages/ChatPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Box, Container, Paper, Drawer, useMediaQuery, useTheme, Snackbar, Alert, CircularProgress } from '@mui/material';\nimport { useAuth } from '../contexts/AuthContext';\nimport Header from '../components/Header';\nimport ContactList from '../components/ContactList';\nimport ChatWindow from '../components/ChatWindow';\nimport CallDialog from '../components/CallDialog';\nimport WebSocketService from '../services/WebSocketService';\nimport MessageService from '../services/MessageService';\nimport FileService from '../services/FileService';\nimport CallService from '../services/CallService';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatPage = ({\n  darkMode,\n  toggleDarkMode\n}) => {\n  _s();\n  const [contacts, setContacts] = useState([]);\n  const [selectedContact, setSelectedContact] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [files, setFiles] = useState([]);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [callDialogOpen, setCallDialogOpen] = useState(false);\n  const [currentCall, setCurrentCall] = useState(null);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const {\n    currentUser\n  } = useAuth();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n  const drawerWidth = 320;\n\n  // Initialize WebSocket connection\n  useEffect(() => {\n    if (!currentUser) return;\n    WebSocketService.connect(\n    // On connect\n    () => {\n      // Subscribe to user's message queue\n      WebSocketService.subscribeToUserMessages(currentUser.id.toString(), handleNewMessage);\n\n      // Subscribe to read receipts\n      WebSocketService.subscribeToReadReceipts(currentUser.id.toString(), handleReadReceipt);\n\n      // Subscribe to call notifications\n      WebSocketService.subscribeToCallNotifications(currentUser.id.toString(), handleCallNotification);\n    },\n    // On error\n    error => {\n      setError('Failed to connect to the messaging server. Please try again.');\n    });\n\n    // Clean up on unmount\n    return () => {\n      WebSocketService.unsubscribeAll();\n      WebSocketService.disconnect();\n    };\n  }, [currentUser]);\n\n  // Load contacts\n  useEffect(() => {\n    if (!currentUser) return;\n\n    // In a real application, this would call an API to get the user's contacts\n    // For demo purposes, we'll create some dummy contacts\n    axios.get('/api/users').then(response => {\n      // Filter out the current user\n      const usersList = response.data.filter(user => user.id !== currentUser.id);\n      setContacts(usersList.map(user => ({\n        id: user.id,\n        username: user.username,\n        online: user.online,\n        lastMessageTime: null,\n        lastMessage: null,\n        unreadCount: 0\n      })));\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error loading contacts:', error);\n\n      // For demo purposes, create some dummy contacts if API fails\n      const dummyContacts = [{\n        id: 2,\n        username: 'Alice',\n        online: true,\n        lastMessageTime: new Date().toISOString(),\n        lastMessage: 'Hello there!',\n        unreadCount: 2\n      }, {\n        id: 3,\n        username: 'Bob',\n        online: false,\n        lastMessageTime: new Date(Date.now() - 3600000).toISOString(),\n        lastMessage: 'Can you send me that document?',\n        unreadCount: 0\n      }];\n      setContacts(dummyContacts);\n      setLoading(false);\n    });\n  }, [currentUser]);\n\n  // Handler for new messages\n  const handleNewMessage = message => {\n    if (selectedContact && (message.senderId === selectedContact.id || message.recipientId === selectedContact.id)) {\n      // Add message to current chat\n      setMessages(prev => [...prev, message]);\n\n      // Mark message as read if it's from selected contact\n      if (message.senderId === selectedContact.id) {\n        markMessageAsRead(message.id);\n      }\n    } else {\n      // Update contacts with unread message count\n      setContacts(prev => prev.map(contact => contact.id === message.senderId ? {\n        ...contact,\n        lastMessage: message.content,\n        lastMessageTime: message.timestamp,\n        unreadCount: contact.unreadCount + 1\n      } : contact));\n      setUnreadCount(prev => prev + 1);\n    }\n  };\n\n  // Handler for read receipts\n  const handleReadReceipt = receipt => {\n    // Update message as read\n    setMessages(prev => prev.map(message => message.id === receipt.messageId ? {\n      ...message,\n      read: true\n    } : message));\n  };\n\n  // Handler for call notifications\n  const handleCallNotification = callData => {\n    if (callData.status === 'RINGING' && callData.callerId !== currentUser.id) {\n      // Incoming call\n      setCurrentCall(callData);\n      setCallDialogOpen(true);\n    } else if (['COMPLETED', 'REJECTED', 'MISSED'].includes(callData.status)) {\n      // Call ended\n      if (callDialogOpen && currentCall && currentCall.id === callData.id) {\n        setCallDialogOpen(false);\n        setCurrentCall(null);\n      }\n    }\n  };\n\n  // Load messages when selecting a contact\n  useEffect(() => {\n    if (!selectedContact) return;\n    setLoading(true);\n\n    // Load messages\n    MessageService.getMessagesBetweenUsers(currentUser.id, selectedContact.id).then(response => {\n      setMessages(response);\n    }).catch(error => {\n      console.error('Error loading messages:', error);\n      setError('Failed to load messages. Please try again.');\n      setMessages([]);\n    });\n\n    // Load files\n    FileService.getFilesBetweenUsers(currentUser.id, selectedContact.id).then(response => {\n      setFiles(response);\n    }).catch(error => {\n      console.error('Error loading files:', error);\n      setFiles([]);\n    });\n\n    // Mark unread messages as read\n    setContacts(prev => prev.map(contact => contact.id === selectedContact.id ? {\n      ...contact,\n      unreadCount: 0\n    } : contact));\n    setUnreadCount(prev => Math.max(0, prev - (selectedContact.unreadCount || 0)));\n    setLoading(false);\n\n    // Close drawer on mobile\n    if (isMobile) {\n      setDrawerOpen(false);\n    }\n  }, [selectedContact, currentUser.id]);\n\n  // Send a message\n  const handleSendMessage = messageData => {\n    if (!selectedContact) return;\n    const message = {\n      content: messageData.content,\n      encrypted: messageData.encrypted,\n      senderId: currentUser.id,\n      recipientId: selectedContact.id,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n\n    // Send via WebSocket\n    WebSocketService.sendMessage(message);\n\n    // Optimistically add to UI\n    setMessages(prev => [...prev, message]);\n\n    // Update contact's last message\n    setContacts(prev => prev.map(contact => contact.id === selectedContact.id ? {\n      ...contact,\n      lastMessage: message.encrypted ? '[Encrypted Message]' : message.content,\n      lastMessageTime: message.timestamp\n    } : contact));\n  };\n\n  // Mark message as read\n  const markMessageAsRead = messageId => {\n    const receipt = {\n      messageId,\n      senderId: selectedContact.id,\n      recipientId: currentUser.id\n    };\n    WebSocketService.sendReadReceipt(receipt);\n    MessageService.markAsRead(messageId);\n  };\n\n  // Start a call\n  const handleStartCall = (contactId, type) => {\n    CallService.initiateCall(currentUser.id, contactId, type).then(response => {\n      setCurrentCall(response);\n      setCallDialogOpen(true);\n    }).catch(error => {\n      console.error('Error starting call:', error);\n      setError('Failed to start call. Please try again.');\n    });\n  };\n\n  // Handle file upload\n  const handleFileUpload = (file, recipientId, encrypt, encryptionKey) => {\n    if (!file) return;\n    FileService.uploadFile(file, currentUser.id, recipientId, encrypt, encryptionKey).then(response => {\n      // Add file to list\n      setFiles(prev => [...prev, response]);\n    }).catch(error => {\n      console.error('Error uploading file:', error);\n      setError('Failed to upload file. Please try again.');\n    });\n  };\n\n  // Handle call status change\n  const handleCallStatusChange = status => {\n    if (!currentCall) return;\n    if (status === 'COMPLETED') {\n      CallService.endCall(currentCall.id);\n    } else if (status === 'ONGOING') {\n      CallService.answerCall(currentCall.id);\n    } else if (status === 'REJECTED') {\n      CallService.rejectCall(currentCall.id);\n    }\n  };\n\n  // Calculate total unread count for the header\n  const totalUnreadCount = contacts.reduce((sum, contact) => sum + (contact.unreadCount || 0), 0);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: '100vh',\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      darkMode: darkMode,\n      toggleDarkMode: toggleDarkMode,\n      unreadCount: totalUnreadCount,\n      onMenuClick: () => setDrawerOpen(!drawerOpen)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexGrow: 1,\n        overflow: 'hidden'\n      },\n      children: [isMobile ? /*#__PURE__*/_jsxDEV(Drawer, {\n        open: drawerOpen,\n        onClose: () => setDrawerOpen(false),\n        sx: {\n          width: drawerWidth,\n          flexShrink: 0,\n          '& .MuiDrawer-paper': {\n            width: drawerWidth,\n            boxSizing: 'border-box'\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(ContactList, {\n          contacts: contacts,\n          selectedContactId: selectedContact === null || selectedContact === void 0 ? void 0 : selectedContact.id,\n          onSelectContact: contact => setSelectedContact(contact)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: drawerWidth,\n          flexShrink: 0,\n          borderRight: 1,\n          borderColor: 'divider',\n          overflow: 'auto'\n        },\n        children: /*#__PURE__*/_jsxDEV(ContactList, {\n          contacts: contacts,\n          selectedContactId: selectedContact === null || selectedContact === void 0 ? void 0 : selectedContact.id,\n          onSelectContact: contact => setSelectedContact(contact)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          flexGrow: 1,\n          p: 0\n        },\n        children: loading ? /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            height: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(ChatWindow, {\n          contact: selectedContact,\n          messages: messages,\n          files: files,\n          userId: currentUser.id,\n          onSendMessage: handleSendMessage,\n          onStartCall: handleStartCall,\n          onFileUpload: handleFileUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CallDialog, {\n      open: callDialogOpen,\n      onClose: () => {\n        setCallDialogOpen(false);\n        setCurrentCall(null);\n      },\n      callData: currentCall,\n      currentUser: currentUser,\n      onCallStatusChange: handleCallStatusChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: !!error,\n      autoHideDuration: 6000,\n      onClose: () => setError(''),\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setError(''),\n        severity: \"error\",\n        sx: {\n          width: '100%'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 313,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatPage, \"kuVlhc3R8vYjaDNTHjTBjX72/Qo=\", false, function () {\n  return [useAuth, useTheme, useMediaQuery];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Box","Container","Paper","Drawer","useMediaQuery","useTheme","Snackbar","Alert","CircularProgress","useAuth","Header","ContactList","ChatWindow","CallDialog","WebSocketService","MessageService","FileService","CallService","axios","jsxDEV","_jsxDEV","ChatPage","darkMode","toggleDarkMode","_s","contacts","setContacts","selectedContact","setSelectedContact","messages","setMessages","files","setFiles","drawerOpen","setDrawerOpen","loading","setLoading","error","setError","callDialogOpen","setCallDialogOpen","currentCall","setCurrentCall","unreadCount","setUnreadCount","currentUser","theme","isMobile","breakpoints","down","drawerWidth","connect","subscribeToUserMessages","id","toString","handleNewMessage","subscribeToReadReceipts","handleReadReceipt","subscribeToCallNotifications","handleCallNotification","unsubscribeAll","disconnect","get","then","response","usersList","data","filter","user","map","username","online","lastMessageTime","lastMessage","catch","console","dummyContacts","Date","toISOString","now","message","senderId","recipientId","prev","markMessageAsRead","contact","content","timestamp","receipt","messageId","read","callData","status","callerId","includes","getMessagesBetweenUsers","getFilesBetweenUsers","Math","max","handleSendMessage","messageData","encrypted","sendMessage","sendReadReceipt","markAsRead","handleStartCall","contactId","type","initiateCall","handleFileUpload","file","encrypt","encryptionKey","uploadFile","handleCallStatusChange","endCall","answerCall","rejectCall","totalUnreadCount","reduce","sum","sx","height","display","flexDirection","children","onMenuClick","fileName","_jsxFileName","lineNumber","columnNumber","flexGrow","overflow","open","onClose","width","flexShrink","boxSizing","selectedContactId","onSelectContact","borderRight","borderColor","p","justifyContent","alignItems","userId","onSendMessage","onStartCall","onFileUpload","onCallStatusChange","autoHideDuration","anchorOrigin","vertical","horizontal","severity","_c","$RefreshReg$"],"sources":["/workspaces/java-besic-to-advance/Messanger-App/frontend/src/pages/ChatPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { \n  Box, Container, Paper, Drawer, useMediaQuery, useTheme,\n  Snackbar, Alert, CircularProgress\n} from '@mui/material';\nimport { useAuth } from '../contexts/AuthContext';\nimport Header from '../components/Header';\nimport ContactList from '../components/ContactList';\nimport ChatWindow from '../components/ChatWindow';\nimport CallDialog from '../components/CallDialog';\nimport WebSocketService from '../services/WebSocketService';\nimport MessageService from '../services/MessageService';\nimport FileService from '../services/FileService';\nimport CallService from '../services/CallService';\nimport axios from 'axios';\n\nconst ChatPage = ({ darkMode, toggleDarkMode }) => {\n  const [contacts, setContacts] = useState([]);\n  const [selectedContact, setSelectedContact] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [files, setFiles] = useState([]);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [callDialogOpen, setCallDialogOpen] = useState(false);\n  const [currentCall, setCurrentCall] = useState(null);\n  const [unreadCount, setUnreadCount] = useState(0);\n  \n  const { currentUser } = useAuth();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n  const drawerWidth = 320;\n  \n  // Initialize WebSocket connection\n  useEffect(() => {\n    if (!currentUser) return;\n    \n    WebSocketService.connect(\n      // On connect\n      () => {\n        // Subscribe to user's message queue\n        WebSocketService.subscribeToUserMessages(\n          currentUser.id.toString(), \n          handleNewMessage\n        );\n        \n        // Subscribe to read receipts\n        WebSocketService.subscribeToReadReceipts(\n          currentUser.id.toString(),\n          handleReadReceipt\n        );\n        \n        // Subscribe to call notifications\n        WebSocketService.subscribeToCallNotifications(\n          currentUser.id.toString(),\n          handleCallNotification\n        );\n      },\n      // On error\n      (error) => {\n        setError('Failed to connect to the messaging server. Please try again.');\n      }\n    );\n    \n    // Clean up on unmount\n    return () => {\n      WebSocketService.unsubscribeAll();\n      WebSocketService.disconnect();\n    };\n  }, [currentUser]);\n  \n  // Load contacts\n  useEffect(() => {\n    if (!currentUser) return;\n    \n    // In a real application, this would call an API to get the user's contacts\n    // For demo purposes, we'll create some dummy contacts\n    axios.get('/api/users')\n      .then(response => {\n        // Filter out the current user\n        const usersList = response.data.filter(user => user.id !== currentUser.id);\n        setContacts(usersList.map(user => ({\n          id: user.id,\n          username: user.username,\n          online: user.online,\n          lastMessageTime: null,\n          lastMessage: null,\n          unreadCount: 0\n        })));\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error('Error loading contacts:', error);\n        \n        // For demo purposes, create some dummy contacts if API fails\n        const dummyContacts = [\n          {\n            id: 2,\n            username: 'Alice',\n            online: true,\n            lastMessageTime: new Date().toISOString(),\n            lastMessage: 'Hello there!',\n            unreadCount: 2\n          },\n          {\n            id: 3,\n            username: 'Bob',\n            online: false,\n            lastMessageTime: new Date(Date.now() - 3600000).toISOString(),\n            lastMessage: 'Can you send me that document?',\n            unreadCount: 0\n          }\n        ];\n        setContacts(dummyContacts);\n        setLoading(false);\n      });\n  }, [currentUser]);\n  \n  // Handler for new messages\n  const handleNewMessage = (message) => {\n    if (selectedContact && (message.senderId === selectedContact.id || message.recipientId === selectedContact.id)) {\n      // Add message to current chat\n      setMessages(prev => [...prev, message]);\n      \n      // Mark message as read if it's from selected contact\n      if (message.senderId === selectedContact.id) {\n        markMessageAsRead(message.id);\n      }\n    } else {\n      // Update contacts with unread message count\n      setContacts(prev => \n        prev.map(contact => \n          contact.id === message.senderId \n            ? { \n                ...contact, \n                lastMessage: message.content, \n                lastMessageTime: message.timestamp,\n                unreadCount: contact.unreadCount + 1 \n              }\n            : contact\n        )\n      );\n      \n      setUnreadCount(prev => prev + 1);\n    }\n  };\n  \n  // Handler for read receipts\n  const handleReadReceipt = (receipt) => {\n    // Update message as read\n    setMessages(prev => \n      prev.map(message => \n        message.id === receipt.messageId \n          ? { ...message, read: true }\n          : message\n      )\n    );\n  };\n  \n  // Handler for call notifications\n  const handleCallNotification = (callData) => {\n    if (callData.status === 'RINGING' && callData.callerId !== currentUser.id) {\n      // Incoming call\n      setCurrentCall(callData);\n      setCallDialogOpen(true);\n    } else if (['COMPLETED', 'REJECTED', 'MISSED'].includes(callData.status)) {\n      // Call ended\n      if (callDialogOpen && currentCall && currentCall.id === callData.id) {\n        setCallDialogOpen(false);\n        setCurrentCall(null);\n      }\n    }\n  };\n  \n  // Load messages when selecting a contact\n  useEffect(() => {\n    if (!selectedContact) return;\n    \n    setLoading(true);\n    \n    // Load messages\n    MessageService.getMessagesBetweenUsers(currentUser.id, selectedContact.id)\n      .then(response => {\n        setMessages(response);\n      })\n      .catch(error => {\n        console.error('Error loading messages:', error);\n        setError('Failed to load messages. Please try again.');\n        setMessages([]);\n      });\n      \n    // Load files\n    FileService.getFilesBetweenUsers(currentUser.id, selectedContact.id)\n      .then(response => {\n        setFiles(response);\n      })\n      .catch(error => {\n        console.error('Error loading files:', error);\n        setFiles([]);\n      });\n      \n    // Mark unread messages as read\n    setContacts(prev => \n      prev.map(contact => \n        contact.id === selectedContact.id \n          ? { ...contact, unreadCount: 0 }\n          : contact\n      )\n    );\n    \n    setUnreadCount(prev => Math.max(0, prev - (selectedContact.unreadCount || 0)));\n    setLoading(false);\n    \n    // Close drawer on mobile\n    if (isMobile) {\n      setDrawerOpen(false);\n    }\n  }, [selectedContact, currentUser.id]);\n  \n  // Send a message\n  const handleSendMessage = (messageData) => {\n    if (!selectedContact) return;\n    \n    const message = {\n      content: messageData.content,\n      encrypted: messageData.encrypted,\n      senderId: currentUser.id,\n      recipientId: selectedContact.id,\n      timestamp: new Date().toISOString(),\n      read: false\n    };\n    \n    // Send via WebSocket\n    WebSocketService.sendMessage(message);\n    \n    // Optimistically add to UI\n    setMessages(prev => [...prev, message]);\n    \n    // Update contact's last message\n    setContacts(prev => \n      prev.map(contact => \n        contact.id === selectedContact.id \n          ? { \n              ...contact, \n              lastMessage: message.encrypted ? '[Encrypted Message]' : message.content,\n              lastMessageTime: message.timestamp\n            }\n          : contact\n      )\n    );\n  };\n  \n  // Mark message as read\n  const markMessageAsRead = (messageId) => {\n    const receipt = {\n      messageId,\n      senderId: selectedContact.id,\n      recipientId: currentUser.id\n    };\n    \n    WebSocketService.sendReadReceipt(receipt);\n    MessageService.markAsRead(messageId);\n  };\n  \n  // Start a call\n  const handleStartCall = (contactId, type) => {\n    CallService.initiateCall(currentUser.id, contactId, type)\n      .then(response => {\n        setCurrentCall(response);\n        setCallDialogOpen(true);\n      })\n      .catch(error => {\n        console.error('Error starting call:', error);\n        setError('Failed to start call. Please try again.');\n      });\n  };\n  \n  // Handle file upload\n  const handleFileUpload = (file, recipientId, encrypt, encryptionKey) => {\n    if (!file) return;\n    \n    FileService.uploadFile(file, currentUser.id, recipientId, encrypt, encryptionKey)\n      .then(response => {\n        // Add file to list\n        setFiles(prev => [...prev, response]);\n      })\n      .catch(error => {\n        console.error('Error uploading file:', error);\n        setError('Failed to upload file. Please try again.');\n      });\n  };\n  \n  // Handle call status change\n  const handleCallStatusChange = (status) => {\n    if (!currentCall) return;\n    \n    if (status === 'COMPLETED') {\n      CallService.endCall(currentCall.id);\n    } else if (status === 'ONGOING') {\n      CallService.answerCall(currentCall.id);\n    } else if (status === 'REJECTED') {\n      CallService.rejectCall(currentCall.id);\n    }\n  };\n  \n  // Calculate total unread count for the header\n  const totalUnreadCount = contacts.reduce(\n    (sum, contact) => sum + (contact.unreadCount || 0), \n    0\n  );\n  \n  return (\n    <Box sx={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>\n      <Header \n        darkMode={darkMode} \n        toggleDarkMode={toggleDarkMode}\n        unreadCount={totalUnreadCount}\n        onMenuClick={() => setDrawerOpen(!drawerOpen)}\n      />\n      \n      <Box sx={{ display: 'flex', flexGrow: 1, overflow: 'hidden' }}>\n        {/* Contact List - persistent on desktop, drawer on mobile */}\n        {isMobile ? (\n          <Drawer\n            open={drawerOpen}\n            onClose={() => setDrawerOpen(false)}\n            sx={{\n              width: drawerWidth,\n              flexShrink: 0,\n              '& .MuiDrawer-paper': {\n                width: drawerWidth,\n                boxSizing: 'border-box',\n              },\n            }}\n          >\n            <ContactList \n              contacts={contacts}\n              selectedContactId={selectedContact?.id}\n              onSelectContact={(contact) => setSelectedContact(contact)}\n            />\n          </Drawer>\n        ) : (\n          <Box\n            sx={{\n              width: drawerWidth,\n              flexShrink: 0,\n              borderRight: 1,\n              borderColor: 'divider',\n              overflow: 'auto'\n            }}\n          >\n            <ContactList \n              contacts={contacts}\n              selectedContactId={selectedContact?.id}\n              onSelectContact={(contact) => setSelectedContact(contact)}\n            />\n          </Box>\n        )}\n        \n        {/* Chat Window */}\n        <Box sx={{ flexGrow: 1, p: 0 }}>\n          {loading ? (\n            <Box sx={{ \n              display: 'flex', \n              justifyContent: 'center', \n              alignItems: 'center',\n              height: '100%'\n            }}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <ChatWindow\n              contact={selectedContact}\n              messages={messages}\n              files={files}\n              userId={currentUser.id}\n              onSendMessage={handleSendMessage}\n              onStartCall={handleStartCall}\n              onFileUpload={handleFileUpload}\n            />\n          )}\n        </Box>\n      </Box>\n      \n      {/* Call Dialog */}\n      <CallDialog \n        open={callDialogOpen}\n        onClose={() => {\n          setCallDialogOpen(false);\n          setCurrentCall(null);\n        }}\n        callData={currentCall}\n        currentUser={currentUser}\n        onCallStatusChange={handleCallStatusChange}\n      />\n      \n      {/* Error Snackbar */}\n      <Snackbar\n        open={!!error}\n        autoHideDuration={6000}\n        onClose={() => setError('')}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n      >\n        <Alert \n          onClose={() => setError('')} \n          severity=\"error\" \n          sx={{ width: '100%' }}\n        >\n          {error}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n};\n\nexport default ChatPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}