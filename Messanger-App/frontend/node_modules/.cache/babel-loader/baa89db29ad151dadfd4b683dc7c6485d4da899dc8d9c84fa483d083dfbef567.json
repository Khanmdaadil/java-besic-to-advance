{"ast":null,"code":"import axios from 'axios';\nconst API_URL = '/api/messages/';\nclass MessageService {\n  constructor() {\n    this.axios = axios.create();\n\n    // Add request interceptor to include token in all requests\n    this.axios.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n      }\n      return config;\n    });\n  }\n  async getMessagesBetweenUsers(user1Id, user2Id) {\n    const response = await this.axios.get(`${API_URL}between/${user1Id}/${user2Id}`);\n    return response.data;\n  }\n  async getUnreadMessages(userId) {\n    const response = await this.axios.get(`${API_URL}unread/${userId}`);\n    return response.data;\n  }\n  async markAsRead(messageId) {\n    const response = await this.axios.put(`${API_URL}${messageId}/read`);\n    return response.data;\n  }\n  async setSelfDestructTimer(messageId, minutes) {\n    const response = await this.axios.put(`${API_URL}${messageId}/self-destruct?minutes=${minutes}`);\n    return response.data;\n  }\n}\nexport default new MessageService();","map":{"version":3,"names":["axios","API_URL","MessageService","constructor","create","interceptors","request","use","config","token","localStorage","getItem","headers","getMessagesBetweenUsers","user1Id","user2Id","response","get","data","getUnreadMessages","userId","markAsRead","messageId","put","setSelfDestructTimer","minutes"],"sources":["/workspaces/java-besic-to-advance/Messanger-App/frontend/src/services/MessageService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = '/api/messages/';\n\nclass MessageService {\n  constructor() {\n    this.axios = axios.create();\n    \n    // Add request interceptor to include token in all requests\n    this.axios.interceptors.request.use((config) => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n      }\n      return config;\n    });\n  }\n\n  async getMessagesBetweenUsers(user1Id, user2Id) {\n    const response = await this.axios.get(`${API_URL}between/${user1Id}/${user2Id}`);\n    return response.data;\n  }\n\n  async getUnreadMessages(userId) {\n    const response = await this.axios.get(`${API_URL}unread/${userId}`);\n    return response.data;\n  }\n\n  async markAsRead(messageId) {\n    const response = await this.axios.put(`${API_URL}${messageId}/read`);\n    return response.data;\n  }\n\n  async setSelfDestructTimer(messageId, minutes) {\n    const response = await this.axios.put(`${API_URL}${messageId}/self-destruct?minutes=${minutes}`);\n    return response.data;\n  }\n}\n\nexport default new MessageService();\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,gBAAgB;AAEhC,MAAMC,cAAc,CAAC;EACnBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACH,KAAK,GAAGA,KAAK,CAACI,MAAM,CAAC,CAAC;;IAE3B;IACA,IAAI,CAACJ,KAAK,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;MAC9C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIF,KAAK,EAAE;QACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;MACrD;MACA,OAAOD,MAAM;IACf,CAAC,CAAC;EACJ;EAEA,MAAMK,uBAAuBA,CAACC,OAAO,EAAEC,OAAO,EAAE;IAC9C,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAAChB,KAAK,CAACiB,GAAG,CAAC,GAAGhB,OAAO,WAAWa,OAAO,IAAIC,OAAO,EAAE,CAAC;IAChF,OAAOC,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMC,iBAAiBA,CAACC,MAAM,EAAE;IAC9B,MAAMJ,QAAQ,GAAG,MAAM,IAAI,CAAChB,KAAK,CAACiB,GAAG,CAAC,GAAGhB,OAAO,UAAUmB,MAAM,EAAE,CAAC;IACnE,OAAOJ,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMG,UAAUA,CAACC,SAAS,EAAE;IAC1B,MAAMN,QAAQ,GAAG,MAAM,IAAI,CAAChB,KAAK,CAACuB,GAAG,CAAC,GAAGtB,OAAO,GAAGqB,SAAS,OAAO,CAAC;IACpE,OAAON,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMM,oBAAoBA,CAACF,SAAS,EAAEG,OAAO,EAAE;IAC7C,MAAMT,QAAQ,GAAG,MAAM,IAAI,CAAChB,KAAK,CAACuB,GAAG,CAAC,GAAGtB,OAAO,GAAGqB,SAAS,0BAA0BG,OAAO,EAAE,CAAC;IAChG,OAAOT,QAAQ,CAACE,IAAI;EACtB;AACF;AAEA,eAAe,IAAIhB,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}