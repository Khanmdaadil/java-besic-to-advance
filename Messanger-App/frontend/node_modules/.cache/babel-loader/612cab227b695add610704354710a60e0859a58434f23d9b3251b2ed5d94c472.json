{"ast":null,"code":"import CryptoJS from 'crypto-js';\n\n// Initialize encryption system\nexport const initializeEncryption = () => {\n  // This is a placeholder for any global encryption setup\n  console.log('Encryption system initialized');\n};\n\n// Generate a random AES key\nexport const generateAESKey = () => {\n  const keyBytes = new Uint8Array(32); // 256 bits\n  window.crypto.getRandomValues(keyBytes);\n  return Array.from(keyBytes, byte => byte.toString(16).padStart(2, '0')).join('');\n};\n\n// Encrypt message with AES\nexport const encryptMessage = (message, key) => {\n  try {\n    return CryptoJS.AES.encrypt(message, key).toString();\n  } catch (error) {\n    console.error('Encryption error:', error);\n    return null;\n  }\n};\n\n// Decrypt message with AES\nexport const decryptMessage = (encryptedMessage, key) => {\n  try {\n    const bytes = CryptoJS.AES.decrypt(encryptedMessage, key);\n    return bytes.toString(CryptoJS.enc.Utf8);\n  } catch (error) {\n    console.error('Decryption error:', error);\n    return null;\n  }\n};\n\n// Generate RSA key pair (simulated with placeholder function, as browser crypto API doesn't support RSA key gen directly)\nexport const generateKeyPair = () => {\n  // In production, use Web Crypto API or a dedicated library for actual RSA key generation\n  // This is a placeholder that returns dummy strings for the tutorial\n  return {\n    publicKey: 'simulated-public-key-' + Date.now(),\n    privateKey: 'simulated-private-key-' + Date.now()\n  };\n};\n\n// Hash a password (for demonstration purposes)\nexport const hashPassword = password => {\n  return CryptoJS.SHA256(password).toString();\n};\n\n// Verify file integrity with hash\nexport const hashFile = async file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      const wordArray = CryptoJS.lib.WordArray.create(e.target.result);\n      const hash = CryptoJS.SHA256(wordArray).toString();\n      resolve(hash);\n    };\n    reader.onerror = error => reject(error);\n    reader.readAsArrayBuffer(file);\n  });\n};","map":{"version":3,"names":["CryptoJS","initializeEncryption","console","log","generateAESKey","keyBytes","Uint8Array","window","crypto","getRandomValues","Array","from","byte","toString","padStart","join","encryptMessage","message","key","AES","encrypt","error","decryptMessage","encryptedMessage","bytes","decrypt","enc","Utf8","generateKeyPair","publicKey","Date","now","privateKey","hashPassword","password","SHA256","hashFile","file","Promise","resolve","reject","reader","FileReader","onload","e","wordArray","lib","WordArray","create","target","result","hash","onerror","readAsArrayBuffer"],"sources":["/workspaces/java-besic-to-advance/Messanger-App/frontend/src/utils/encryption.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\n\n// Initialize encryption system\nexport const initializeEncryption = () => {\n  // This is a placeholder for any global encryption setup\n  console.log('Encryption system initialized');\n};\n\n// Generate a random AES key\nexport const generateAESKey = () => {\n  const keyBytes = new Uint8Array(32); // 256 bits\n  window.crypto.getRandomValues(keyBytes);\n  return Array.from(keyBytes, byte => byte.toString(16).padStart(2, '0')).join('');\n};\n\n// Encrypt message with AES\nexport const encryptMessage = (message, key) => {\n  try {\n    return CryptoJS.AES.encrypt(message, key).toString();\n  } catch (error) {\n    console.error('Encryption error:', error);\n    return null;\n  }\n};\n\n// Decrypt message with AES\nexport const decryptMessage = (encryptedMessage, key) => {\n  try {\n    const bytes = CryptoJS.AES.decrypt(encryptedMessage, key);\n    return bytes.toString(CryptoJS.enc.Utf8);\n  } catch (error) {\n    console.error('Decryption error:', error);\n    return null;\n  }\n};\n\n// Generate RSA key pair (simulated with placeholder function, as browser crypto API doesn't support RSA key gen directly)\nexport const generateKeyPair = () => {\n  // In production, use Web Crypto API or a dedicated library for actual RSA key generation\n  // This is a placeholder that returns dummy strings for the tutorial\n  return {\n    publicKey: 'simulated-public-key-' + Date.now(),\n    privateKey: 'simulated-private-key-' + Date.now()\n  };\n};\n\n// Hash a password (for demonstration purposes)\nexport const hashPassword = (password) => {\n  return CryptoJS.SHA256(password).toString();\n};\n\n// Verify file integrity with hash\nexport const hashFile = async (file) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const wordArray = CryptoJS.lib.WordArray.create(e.target.result);\n      const hash = CryptoJS.SHA256(wordArray).toString();\n      resolve(hash);\n    };\n    reader.onerror = (error) => reject(error);\n    reader.readAsArrayBuffer(file);\n  });\n};\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;;AAEhC;AACA,OAAO,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EACxC;EACAC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;AAC9C,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAClC,MAAMC,QAAQ,GAAG,IAAIC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;EACrCC,MAAM,CAACC,MAAM,CAACC,eAAe,CAACJ,QAAQ,CAAC;EACvC,OAAOK,KAAK,CAACC,IAAI,CAACN,QAAQ,EAAEO,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;AAClF,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGA,CAACC,OAAO,EAAEC,GAAG,KAAK;EAC9C,IAAI;IACF,OAAOlB,QAAQ,CAACmB,GAAG,CAACC,OAAO,CAACH,OAAO,EAAEC,GAAG,CAAC,CAACL,QAAQ,CAAC,CAAC;EACtD,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdnB,OAAO,CAACmB,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGA,CAACC,gBAAgB,EAAEL,GAAG,KAAK;EACvD,IAAI;IACF,MAAMM,KAAK,GAAGxB,QAAQ,CAACmB,GAAG,CAACM,OAAO,CAACF,gBAAgB,EAAEL,GAAG,CAAC;IACzD,OAAOM,KAAK,CAACX,QAAQ,CAACb,QAAQ,CAAC0B,GAAG,CAACC,IAAI,CAAC;EAC1C,CAAC,CAAC,OAAON,KAAK,EAAE;IACdnB,OAAO,CAACmB,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMO,eAAe,GAAGA,CAAA,KAAM;EACnC;EACA;EACA,OAAO;IACLC,SAAS,EAAE,uBAAuB,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAC/CC,UAAU,EAAE,wBAAwB,GAAGF,IAAI,CAACC,GAAG,CAAC;EAClD,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAME,YAAY,GAAIC,QAAQ,IAAK;EACxC,OAAOlC,QAAQ,CAACmC,MAAM,CAACD,QAAQ,CAAC,CAACrB,QAAQ,CAAC,CAAC;AAC7C,CAAC;;AAED;AACA,OAAO,MAAMuB,QAAQ,GAAG,MAAOC,IAAI,IAAK;EACtC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;MACrB,MAAMC,SAAS,GAAG7C,QAAQ,CAAC8C,GAAG,CAACC,SAAS,CAACC,MAAM,CAACJ,CAAC,CAACK,MAAM,CAACC,MAAM,CAAC;MAChE,MAAMC,IAAI,GAAGnD,QAAQ,CAACmC,MAAM,CAACU,SAAS,CAAC,CAAChC,QAAQ,CAAC,CAAC;MAClD0B,OAAO,CAACY,IAAI,CAAC;IACf,CAAC;IACDV,MAAM,CAACW,OAAO,GAAI/B,KAAK,IAAKmB,MAAM,CAACnB,KAAK,CAAC;IACzCoB,MAAM,CAACY,iBAAiB,CAAChB,IAAI,CAAC;EAChC,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}