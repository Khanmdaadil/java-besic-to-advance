{"ast":null,"code":"import axios from 'axios';\nconst API_URL = '/api/files/';\nclass FileService {\n  constructor() {\n    this.axios = axios.create();\n\n    // Add request interceptor to include token in all requests\n    this.axios.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n      }\n      return config;\n    });\n  }\n  async uploadFile(file, senderId, recipientId, encrypt = false, encryptionKey = null) {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('senderId', senderId);\n    formData.append('recipientId', recipientId);\n    formData.append('encrypt', encrypt);\n    if (encrypt && encryptionKey) {\n      formData.append('encryptionKey', encryptionKey);\n    }\n    const response = await this.axios.post(`${API_URL}upload`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n  getFileDownloadUrl(fileId, decryptionKey = null) {\n    let url = `${API_URL}download/${fileId}`;\n    if (decryptionKey) {\n      url += `?decryptionKey=${encodeURIComponent(decryptionKey)}`;\n    }\n    return url;\n  }\n  async getFilesBetweenUsers(senderId, recipientId) {\n    const response = await this.axios.get(`${API_URL}between/${senderId}/${recipientId}`);\n    return response.data;\n  }\n  async getFilesSentByUser(userId) {\n    const response = await this.axios.get(`${API_URL}sent/${userId}`);\n    return response.data;\n  }\n  async getFilesReceivedByUser(userId) {\n    const response = await this.axios.get(`${API_URL}received/${userId}`);\n    return response.data;\n  }\n}\nexport default new FileService();","map":{"version":3,"names":["axios","API_URL","FileService","constructor","create","interceptors","request","use","config","token","localStorage","getItem","headers","uploadFile","file","senderId","recipientId","encrypt","encryptionKey","formData","FormData","append","response","post","data","getFileDownloadUrl","fileId","decryptionKey","url","encodeURIComponent","getFilesBetweenUsers","get","getFilesSentByUser","userId","getFilesReceivedByUser"],"sources":["/workspaces/java-besic-to-advance/Messanger-App/frontend/src/services/FileService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = '/api/files/';\n\nclass FileService {\n  constructor() {\n    this.axios = axios.create();\n    \n    // Add request interceptor to include token in all requests\n    this.axios.interceptors.request.use((config) => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n      }\n      return config;\n    });\n  }\n\n  async uploadFile(file, senderId, recipientId, encrypt = false, encryptionKey = null) {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('senderId', senderId);\n    formData.append('recipientId', recipientId);\n    formData.append('encrypt', encrypt);\n    \n    if (encrypt && encryptionKey) {\n      formData.append('encryptionKey', encryptionKey);\n    }\n    \n    const response = await this.axios.post(`${API_URL}upload`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    \n    return response.data;\n  }\n\n  getFileDownloadUrl(fileId, decryptionKey = null) {\n    let url = `${API_URL}download/${fileId}`;\n    if (decryptionKey) {\n      url += `?decryptionKey=${encodeURIComponent(decryptionKey)}`;\n    }\n    return url;\n  }\n\n  async getFilesBetweenUsers(senderId, recipientId) {\n    const response = await this.axios.get(`${API_URL}between/${senderId}/${recipientId}`);\n    return response.data;\n  }\n\n  async getFilesSentByUser(userId) {\n    const response = await this.axios.get(`${API_URL}sent/${userId}`);\n    return response.data;\n  }\n\n  async getFilesReceivedByUser(userId) {\n    const response = await this.axios.get(`${API_URL}received/${userId}`);\n    return response.data;\n  }\n}\n\nexport default new FileService();\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,aAAa;AAE7B,MAAMC,WAAW,CAAC;EAChBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACH,KAAK,GAAGA,KAAK,CAACI,MAAM,CAAC,CAAC;;IAE3B;IACA,IAAI,CAACJ,KAAK,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;MAC9C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIF,KAAK,EAAE;QACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;MACrD;MACA,OAAOD,MAAM;IACf,CAAC,CAAC;EACJ;EAEA,MAAMK,UAAUA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,OAAO,GAAG,KAAK,EAAEC,aAAa,GAAG,IAAI,EAAE;IACnF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEP,IAAI,CAAC;IAC7BK,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEN,QAAQ,CAAC;IACrCI,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEL,WAAW,CAAC;IAC3CG,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEJ,OAAO,CAAC;IAEnC,IAAIA,OAAO,IAAIC,aAAa,EAAE;MAC5BC,QAAQ,CAACE,MAAM,CAAC,eAAe,EAAEH,aAAa,CAAC;IACjD;IAEA,MAAMI,QAAQ,GAAG,MAAM,IAAI,CAACtB,KAAK,CAACuB,IAAI,CAAC,GAAGtB,OAAO,QAAQ,EAAEkB,QAAQ,EAAE;MACnEP,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,OAAOU,QAAQ,CAACE,IAAI;EACtB;EAEAC,kBAAkBA,CAACC,MAAM,EAAEC,aAAa,GAAG,IAAI,EAAE;IAC/C,IAAIC,GAAG,GAAG,GAAG3B,OAAO,YAAYyB,MAAM,EAAE;IACxC,IAAIC,aAAa,EAAE;MACjBC,GAAG,IAAI,kBAAkBC,kBAAkB,CAACF,aAAa,CAAC,EAAE;IAC9D;IACA,OAAOC,GAAG;EACZ;EAEA,MAAME,oBAAoBA,CAACf,QAAQ,EAAEC,WAAW,EAAE;IAChD,MAAMM,QAAQ,GAAG,MAAM,IAAI,CAACtB,KAAK,CAAC+B,GAAG,CAAC,GAAG9B,OAAO,WAAWc,QAAQ,IAAIC,WAAW,EAAE,CAAC;IACrF,OAAOM,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMQ,kBAAkBA,CAACC,MAAM,EAAE;IAC/B,MAAMX,QAAQ,GAAG,MAAM,IAAI,CAACtB,KAAK,CAAC+B,GAAG,CAAC,GAAG9B,OAAO,QAAQgC,MAAM,EAAE,CAAC;IACjE,OAAOX,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMU,sBAAsBA,CAACD,MAAM,EAAE;IACnC,MAAMX,QAAQ,GAAG,MAAM,IAAI,CAACtB,KAAK,CAAC+B,GAAG,CAAC,GAAG9B,OAAO,YAAYgC,MAAM,EAAE,CAAC;IACrE,OAAOX,QAAQ,CAACE,IAAI;EACtB;AACF;AAEA,eAAe,IAAItB,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}