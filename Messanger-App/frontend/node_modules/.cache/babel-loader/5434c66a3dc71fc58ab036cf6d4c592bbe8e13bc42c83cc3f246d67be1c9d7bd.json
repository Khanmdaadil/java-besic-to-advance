{"ast":null,"code":"import axios from 'axios';\nconst API_URL = '/api/calls/';\nclass CallService {\n  constructor() {\n    this.axios = axios.create();\n    this.iceServers = null;\n\n    // Add request interceptor to include token in all requests\n    this.axios.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n      }\n      return config;\n    });\n  }\n\n  // Get ICE servers configuration from backend\n  async getIceServers() {\n    if (this.iceServers) {\n      return this.iceServers;\n    }\n    try {\n      const response = await this.axios.get('/api/webrtc/ice-servers');\n      this.iceServers = response.data;\n      return this.iceServers;\n    } catch (error) {\n      console.error('Failed to fetch ICE servers:', error);\n      // Fallback to public STUN servers if fetch fails\n      return [{\n        urls: ['stun:stun.l.google.com:19302', 'stun:stun1.l.google.com:19302']\n      }];\n    }\n  }\n  async initiateCall(callerId, receiverId, callType) {\n    const response = await this.axios.post(`${API_URL}initiate`, null, {\n      params: {\n        callerId,\n        receiverId,\n        callType\n      }\n    });\n    return response.data;\n  }\n  async answerCall(callId) {\n    const response = await this.axios.put(`${API_URL}${callId}/answer`);\n    return response.data;\n  }\n  async endCall(callId) {\n    const response = await this.axios.put(`${API_URL}${callId}/end`);\n    return response.data;\n  }\n  async rejectCall(callId) {\n    const response = await this.axios.put(`${API_URL}${callId}/reject`);\n    return response.data;\n  }\n  async getCall(callId) {\n    const response = await this.axios.get(`${API_URL}${callId}`);\n    return response.data;\n  }\n  async getCallsBetweenUsers(user1Id, user2Id) {\n    const response = await this.axios.get(`${API_URL}between/${user1Id}/${user2Id}`);\n    return response.data;\n  }\n  async getCallsMadeByUser(userId) {\n    const response = await this.axios.get(`${API_URL}made/${userId}`);\n    return response.data;\n  }\n  async getCallsReceivedByUser(userId) {\n    const response = await this.axios.get(`${API_URL}received/${userId}`);\n    return response.data;\n  }\n  async getOngoingCalls(userId) {\n    const response = await this.axios.get(`${API_URL}ongoing/${userId}`);\n    return response.data;\n  }\n}\nexport default new CallService();","map":{"version":3,"names":["axios","API_URL","CallService","constructor","create","iceServers","interceptors","request","use","config","token","localStorage","getItem","headers","getIceServers","response","get","data","error","console","urls","initiateCall","callerId","receiverId","callType","post","params","answerCall","callId","put","endCall","rejectCall","getCall","getCallsBetweenUsers","user1Id","user2Id","getCallsMadeByUser","userId","getCallsReceivedByUser","getOngoingCalls"],"sources":["/workspaces/java-besic-to-advance/Messanger-App/frontend/src/services/CallService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = '/api/calls/';\n\nclass CallService {\n  constructor() {\n    this.axios = axios.create();\n    this.iceServers = null;\n    \n    // Add request interceptor to include token in all requests\n    this.axios.interceptors.request.use((config) => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n      }\n      return config;\n    });\n  }\n\n  // Get ICE servers configuration from backend\n  async getIceServers() {\n    if (this.iceServers) {\n      return this.iceServers;\n    }\n    \n    try {\n      const response = await this.axios.get('/api/webrtc/ice-servers');\n      this.iceServers = response.data;\n      return this.iceServers;\n    } catch (error) {\n      console.error('Failed to fetch ICE servers:', error);\n      // Fallback to public STUN servers if fetch fails\n      return [\n        {\n          urls: [\n            'stun:stun.l.google.com:19302',\n            'stun:stun1.l.google.com:19302'\n          ]\n        }\n      ];\n    }\n  }\n\n  async initiateCall(callerId, receiverId, callType) {\n    const response = await this.axios.post(`${API_URL}initiate`, null, {\n      params: {\n        callerId,\n        receiverId,\n        callType\n      }\n    });\n    \n    return response.data;\n  }\n\n  async answerCall(callId) {\n    const response = await this.axios.put(`${API_URL}${callId}/answer`);\n    return response.data;\n  }\n\n  async endCall(callId) {\n    const response = await this.axios.put(`${API_URL}${callId}/end`);\n    return response.data;\n  }\n\n  async rejectCall(callId) {\n    const response = await this.axios.put(`${API_URL}${callId}/reject`);\n    return response.data;\n  }\n\n  async getCall(callId) {\n    const response = await this.axios.get(`${API_URL}${callId}`);\n    return response.data;\n  }\n\n  async getCallsBetweenUsers(user1Id, user2Id) {\n    const response = await this.axios.get(`${API_URL}between/${user1Id}/${user2Id}`);\n    return response.data;\n  }\n\n  async getCallsMadeByUser(userId) {\n    const response = await this.axios.get(`${API_URL}made/${userId}`);\n    return response.data;\n  }\n\n  async getCallsReceivedByUser(userId) {\n    const response = await this.axios.get(`${API_URL}received/${userId}`);\n    return response.data;\n  }\n\n  async getOngoingCalls(userId) {\n    const response = await this.axios.get(`${API_URL}ongoing/${userId}`);\n    return response.data;\n  }\n}\n\nexport default new CallService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}